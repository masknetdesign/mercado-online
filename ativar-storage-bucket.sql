-- Script SQL para Ativar Storage e Criar Bucket produtos-images
-- Execute este script no SQL Editor do Supabase

-- ========================================
-- PASSO 1: VERIFICAR SE STORAGE EST√Å HABILITADO
-- ========================================

-- Verificar se as tabelas do Storage existem
SELECT 
    CASE 
        WHEN EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_schema = 'storage' 
            AND table_name = 'buckets'
        ) THEN '‚úÖ Storage est√° HABILITADO'
        ELSE '‚ùå Storage N√ÉO est√° habilitado - Habilite no Dashboard'
    END as status_storage;

-- ========================================
-- PASSO 2: HABILITAR EXTENS√ÉO STORAGE (se necess√°rio)
-- ========================================

-- Habilitar extens√£o do Storage (pode dar erro se j√° estiver habilitada)
CREATE EXTENSION IF NOT EXISTS "storage" SCHEMA "storage";

-- ========================================
-- PASSO 3: CRIAR BUCKET produtos-images
-- ========================================

-- Criar o bucket produtos-images com configura√ß√µes otimizadas
INSERT INTO storage.buckets (
    id,
    name,
    public,
    file_size_limit,
    allowed_mime_types,
    avif_autodetection,
    created_at,
    updated_at
)
VALUES (
    'produtos-images',          -- ID do bucket
    'produtos-images',          -- Nome do bucket
    true,                       -- P√∫blico (permite acesso direto)
    52428800,                   -- 50MB de limite
    '{"image/*"}',              -- Apenas imagens
    false,                      -- Sem autodetec√ß√£o AVIF
    NOW(),                      -- Data de cria√ß√£o
    NOW()                       -- Data de atualiza√ß√£o
)
ON CONFLICT (id) DO UPDATE SET
    public = true,
    file_size_limit = 52428800,
    allowed_mime_types = '{"image/*"}',
    avif_autodetection = false,
    updated_at = NOW();

-- ========================================
-- PASSO 4: CRIAR POL√çTICAS RLS PERMISSIVAS
-- ========================================

-- Remover pol√≠ticas existentes (se houver)
DELETE FROM storage.policies WHERE bucket_id = 'produtos-images';

-- Pol√≠tica SELECT: Permitir visualiza√ß√£o para todos
INSERT INTO storage.policies (
    id,
    bucket_id,
    name,
    definition,
    check_definition,
    command,
    roles
) VALUES (
    'public-select-produtos-images',
    'produtos-images',
    'Allow public SELECT access',
    'true',                     -- Sempre permitir
    NULL,
    'SELECT',
    '{anon, authenticated}'     -- Usu√°rios an√¥nimos e autenticados
);

-- Pol√≠tica INSERT: Permitir upload para todos
INSERT INTO storage.policies (
    id,
    bucket_id,
    name,
    definition,
    check_definition,
    command,
    roles
) VALUES (
    'public-insert-produtos-images',
    'produtos-images',
    'Allow public INSERT access',
    'true',                     -- Sempre permitir
    'true',                     -- Check tamb√©m sempre permitir
    'INSERT',
    '{anon, authenticated}'     -- Usu√°rios an√¥nimos e autenticados
);

-- Pol√≠tica UPDATE: Permitir atualiza√ß√£o para todos
INSERT INTO storage.policies (
    id,
    bucket_id,
    name,
    definition,
    check_definition,
    command,
    roles
) VALUES (
    'public-update-produtos-images',
    'produtos-images',
    'Allow public UPDATE access',
    'true',                     -- Sempre permitir
    'true',                     -- Check tamb√©m sempre permitir
    'UPDATE',
    '{anon, authenticated}'     -- Usu√°rios an√¥nimos e autenticados
);

-- Pol√≠tica DELETE: Permitir exclus√£o para todos
INSERT INTO storage.policies (
    id,
    bucket_id,
    name,
    definition,
    check_definition,
    command,
    roles
) VALUES (
    'public-delete-produtos-images',
    'produtos-images',
    'Allow public DELETE access',
    'true',                     -- Sempre permitir
    NULL,
    'DELETE',
    '{anon, authenticated}'     -- Usu√°rios an√¥nimos e autenticados
);

-- ========================================
-- PASSO 5: VERIFICA√á√ÉO FINAL
-- ========================================

-- Verificar se o bucket foi criado
SELECT 
    'ü™£ BUCKET CRIADO' as status,
    id,
    name,
    public,
    file_size_limit,
    allowed_mime_types
FROM storage.buckets 
WHERE id = 'produtos-images';

-- Verificar se as pol√≠ticas foram criadas
SELECT 
    'üîê POL√çTICAS CRIADAS' as status,
    command,
    COUNT(*) as total,
    string_agg(name, ', ') as policy_names
FROM storage.policies 
WHERE bucket_id = 'produtos-images'
GROUP BY command
ORDER BY command;

-- Verificar se temos todas as 4 pol√≠ticas
SELECT 
    CASE 
        WHEN COUNT(*) = 4 THEN '‚úÖ CONFIGURA√á√ÉO COMPLETA - 4 pol√≠ticas criadas'
        WHEN COUNT(*) > 0 THEN '‚ö†Ô∏è CONFIGURA√á√ÉO PARCIAL - ' || COUNT(*) || ' pol√≠ticas criadas'
        ELSE '‚ùå NENHUMA POL√çTICA CRIADA'
    END as resultado_final
FROM storage.policies 
WHERE bucket_id = 'produtos-images';

-- ========================================
-- INSTRU√á√ïES FINAIS
-- ========================================

-- Ap√≥s executar este script:
-- 1. Verifique se todas as queries executaram sem erro
-- 2. Confirme que o bucket 'produtos-images' foi criado
-- 3. Confirme que as 4 pol√≠ticas foram criadas
-- 4. Desative o modo demo: isDemoMode: false
-- 5. Teste o upload em: http://localhost:8000/admin/

-- IMPORTANTE:
-- - Se der erro "relation storage.buckets does not exist"
--   significa que o Storage n√£o est√° habilitado no seu plano
-- - Neste caso, use o modo demo ou fa√ßa upgrade do plano
-- - Este script cria pol√≠ticas muito permissivas (adequado para desenvolvimento)

-- RESULTADO ESPERADO:
-- ‚úÖ Storage habilitado
-- ‚úÖ Bucket 'produtos-images' criado (p√∫blico, 50MB, apenas imagens)
-- ‚úÖ 4 pol√≠ticas RLS criadas (SELECT, INSERT, UPDATE, DELETE)
-- ‚úÖ Upload de imagens funcionando sem erros