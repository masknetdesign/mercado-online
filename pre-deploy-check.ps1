# Script de Verifica√ß√£o Pr√©-Deploy - Mercado Online
# Verifica se o projeto est√° pronto para deploy

Write-Host "üîç VERIFICA√á√ÉO PR√â-DEPLOY - MERCADO ONLINE" -ForegroundColor Cyan
Write-Host "==========================================" -ForegroundColor Cyan
Write-Host ""

$errors = 0
$warnings = 0

# Fun√ß√£o para verificar arquivo
function Test-FileExists {
    param($filePath, $description)
    
    if (Test-Path $filePath) {
        Write-Host "‚úÖ $description" -ForegroundColor Green
        return $true
    } else {
        Write-Host "‚ùå $description - ARQUIVO N√ÉO ENCONTRADO" -ForegroundColor Red
        $script:errors++
        return $false
    }
}

# Fun√ß√£o para verificar conte√∫do
function Test-FileContent {
    param($filePath, $searchText, $description)
    
    if (Test-Path $filePath) {
        $content = Get-Content $filePath -Raw
        if ($content -match $searchText) {
            Write-Host "‚úÖ $description" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ö†Ô∏è  $description - CONTE√öDO PODE PRECISAR DE AJUSTE" -ForegroundColor Yellow
            $script:warnings++
            return $false
        }
    } else {
        Write-Host "‚ùå $description - ARQUIVO N√ÉO ENCONTRADO" -ForegroundColor Red
        $script:errors++
        return $false
    }
}

Write-Host "üìÅ Verificando estrutura de arquivos..." -ForegroundColor Yellow
Write-Host ""

# Verificar arquivos essenciais
Test-FileExists "netlify.toml" "Configura√ß√£o do Netlify (netlify.toml)"
Test-FileExists ".gitignore" "Arquivo .gitignore"
Test-FileExists "client/index.html" "P√°gina principal do cliente"
Test-FileExists "admin/index.html" "P√°gina do painel administrativo"
Test-FileExists "assets/js/client.js" "JavaScript do cliente"
Test-FileExists "assets/js/admin.js" "JavaScript do admin"
Test-FileExists "assets/js/supabase.js" "Configura√ß√£o do Supabase"
Test-FileExists "assets/css/client.css" "CSS do cliente"
Test-FileExists "assets/css/admin.css" "CSS do admin"

Write-Host ""
Write-Host "‚öôÔ∏è Verificando configura√ß√µes..." -ForegroundColor Yellow
Write-Host ""

# Verificar configura√ß√£o do Netlify
if (Test-Path "netlify.toml") {
    $netlifyContent = Get-Content "netlify.toml" -Raw
    if ($netlifyContent -match 'publish = "."' -and $netlifyContent -match 'from = "/"') {
        Write-Host "‚úÖ Configura√ß√£o do Netlify est√° correta" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Configura√ß√£o do Netlify pode ter problemas" -ForegroundColor Yellow
        $warnings++
    }
}

# Verificar configura√ß√£o do Supabase
if (Test-Path "assets/js/supabase.js") {
    $supabaseContent = Get-Content "assets/js/supabase.js" -Raw
    if ($supabaseContent -match "SUA_URL_DO_SUPABASE_AQUI" -or $supabaseContent -match "YOUR_SUPABASE_URL") {
        Write-Host "‚ö†Ô∏è  Supabase em modo DEMO (funcionar√°, mas sem banco real)" -ForegroundColor Yellow
        $warnings++
    } else {
        Write-Host "‚úÖ Configura√ß√£o do Supabase parece estar personalizada" -ForegroundColor Green
    }
}

Write-Host ""
Write-Host "üåê Verificando estrutura web..." -ForegroundColor Yellow
Write-Host ""

# Verificar se as p√°ginas t√™m conte√∫do b√°sico
Test-FileContent "client/index.html" "Mercado Online" "T√≠tulo na p√°gina do cliente"
Test-FileContent "admin/index.html" "Painel Administrativo" "T√≠tulo na p√°gina do admin"
Test-FileContent "assets/js/client.js" "AppState" "Estado da aplica√ß√£o no cliente"
Test-FileContent "assets/js/admin.js" "AdminState" "Estado da aplica√ß√£o no admin"

Write-Host ""
Write-Host "üìã Verificando documenta√ß√£o..." -ForegroundColor Yellow
Write-Host ""

Test-FileExists "README.md" "Documenta√ß√£o principal (README.md)"
Test-FileExists "INSTALACAO.md" "Guia de instala√ß√£o"
Test-FileExists "DEPLOY.md" "Guia de deploy b√°sico"
Test-FileExists "DEPLOY-NETLIFY-GITHUB.md" "Guia completo de deploy"
Test-FileExists "DEPLOY-RAPIDO.md" "Guia r√°pido de deploy"

Write-Host ""
Write-Host "üîß Verificando ferramentas..." -ForegroundColor Yellow
Write-Host ""

# Verificar Git
try {
    $gitVersion = git --version
    Write-Host "‚úÖ Git instalado: $gitVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Git n√£o encontrado - NECESS√ÅRIO PARA DEPLOY" -ForegroundColor Red
    $errors++
}

# Verificar se √© um reposit√≥rio Git
if (Test-Path ".git") {
    Write-Host "‚úÖ Reposit√≥rio Git inicializado" -ForegroundColor Green
    
    # Verificar se h√° commits
    try {
        $commits = git log --oneline 2>$null
        if ($commits) {
            Write-Host "‚úÖ Reposit√≥rio tem commits" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è  Reposit√≥rio sem commits - fa√ßa o primeiro commit" -ForegroundColor Yellow
            $warnings++
        }
    } catch {
        Write-Host "‚ö†Ô∏è  Reposit√≥rio sem commits - fa√ßa o primeiro commit" -ForegroundColor Yellow
        $warnings++
    }
    
    # Verificar remote origin
    try {
        $remotes = git remote -v 2>$null
        if ($remotes -match "origin") {
            Write-Host "‚úÖ Remote origin configurado" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è  Remote origin n√£o configurado - configure antes do deploy" -ForegroundColor Yellow
            $warnings++
        }
    } catch {
        Write-Host "‚ö†Ô∏è  N√£o foi poss√≠vel verificar remotes" -ForegroundColor Yellow
        $warnings++
    }
} else {
    Write-Host "‚ö†Ô∏è  N√£o √© um reposit√≥rio Git - execute 'git init' primeiro" -ForegroundColor Yellow
    $warnings++
}

Write-Host ""
Write-Host "üìä RESULTADO DA VERIFICA√á√ÉO" -ForegroundColor Cyan
Write-Host "===========================" -ForegroundColor Cyan
Write-Host ""

if ($errors -eq 0 -and $warnings -eq 0) {
    Write-Host "üéâ PERFEITO! Projeto pronto para deploy!" -ForegroundColor Green
    Write-Host "‚úÖ Todos os arquivos necess√°rios est√£o presentes" -ForegroundColor Green
    Write-Host "‚úÖ Configura√ß√µes parecem corretas" -ForegroundColor Green
    Write-Host "‚úÖ Ferramentas necess√°rias instaladas" -ForegroundColor Green
} elseif ($errors -eq 0) {
    Write-Host "‚úÖ PROJETO PRONTO para deploy!" -ForegroundColor Green
    Write-Host "‚ö†Ô∏è  $warnings avisos encontrados (n√£o impedem o deploy)" -ForegroundColor Yellow
} else {
    Write-Host "‚ùå PROJETO N√ÉO EST√Å PRONTO para deploy!" -ForegroundColor Red
    Write-Host "‚ùå $errors erros encontrados" -ForegroundColor Red
    if ($warnings -gt 0) {
        Write-Host "‚ö†Ô∏è  $warnings avisos encontrados" -ForegroundColor Yellow
    }
}

Write-Host ""
Write-Host "üìã Pr√≥ximos passos recomendados:" -ForegroundColor Cyan

if ($errors -gt 0) {
    Write-Host "1. Corrija os erros listados acima" -ForegroundColor White
    Write-Host "2. Execute este script novamente" -ForegroundColor White
    Write-Host "3. Quando n√£o houver erros, prossiga com o deploy" -ForegroundColor White
} else {
    Write-Host "1. Execute: .\deploy-setup.ps1 (para configurar Git + GitHub)" -ForegroundColor White
    Write-Host "2. Acesse netlify.com e conecte seu reposit√≥rio" -ForegroundColor White
    Write-Host "3. Fa√ßa o deploy e teste o site" -ForegroundColor White
}

Write-Host ""
Write-Host "üìñ Documenta√ß√£o dispon√≠vel:" -ForegroundColor Yellow
Write-Host "- DEPLOY-RAPIDO.md (guia r√°pido)" -ForegroundColor White
Write-Host "- DEPLOY-NETLIFY-GITHUB.md (guia completo)" -ForegroundColor White
Write-Host ""

Read-Host "Pressione Enter para finalizar"