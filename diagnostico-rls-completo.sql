-- ========================================
-- DIAGN√ìSTICO COMPLETO DO ERRO RLS
-- Identifica e resolve: StorageApiError: new row violates row-level security policy
-- ========================================

-- PASSO 1: DIAGN√ìSTICO INICIAL
SELECT 'üîç INICIANDO DIAGN√ìSTICO COMPLETO DO RLS' as status;

-- Verificar se o bucket existe
SELECT 
    'üì¶ VERIFICA√á√ÉO DO BUCKET' as etapa,
    CASE 
        WHEN EXISTS (SELECT 1 FROM storage.buckets WHERE id = 'produtos-images') 
        THEN '‚úÖ Bucket produtos-images EXISTE'
        ELSE '‚ùå Bucket produtos-images N√ÉO EXISTE'
    END as status_bucket,
    CASE 
        WHEN EXISTS (SELECT 1 FROM storage.buckets WHERE id = 'produtos-images' AND public = true) 
        THEN '‚úÖ Bucket √© P√öBLICO'
        ELSE '‚ùå Bucket N√ÉO √© p√∫blico'
    END as status_publico;

-- Verificar RLS na tabela objects
SELECT 
    'üîê VERIFICA√á√ÉO DO RLS' as etapa,
    CASE 
        WHEN pg_class.relrowsecurity THEN '‚úÖ RLS HABILITADO'
        ELSE '‚ùå RLS DESABILITADO'
    END as status_rls
FROM pg_class 
JOIN pg_namespace ON pg_class.relnamespace = pg_namespace.oid
WHERE pg_namespace.nspname = 'storage' 
AND pg_class.relname = 'objects';

-- Listar TODAS as pol√≠ticas RLS existentes
SELECT 
    'üìã POL√çTICAS RLS EXISTENTES' as etapa,
    policyname as nome_politica,
    cmd as tipo_operacao,
    CASE 
        WHEN qual IS NOT NULL THEN 'TEM CONDI√á√ÉO USING'
        ELSE 'SEM CONDI√á√ÉO USING'
    END as tem_using,
    CASE 
        WHEN with_check IS NOT NULL THEN 'TEM CONDI√á√ÉO WITH CHECK'
        ELSE 'SEM CONDI√á√ÉO WITH CHECK'
    END as tem_with_check
FROM pg_policies 
WHERE schemaname = 'storage' 
AND tablename = 'objects'
ORDER BY policyname;

-- Verificar se h√° objetos no bucket
SELECT 
    'üìÅ OBJETOS NO BUCKET' as etapa,
    COUNT(*) as total_objetos,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚ö†Ô∏è Bucket cont√©m objetos'
        ELSE '‚úÖ Bucket est√° vazio'
    END as status_objetos
FROM storage.objects 
WHERE bucket_id = 'produtos-images';

-- PASSO 2: TESTE DE PERMISS√ïES
DO $$
BEGIN
    -- Teste de leitura
    BEGIN
        PERFORM 1 FROM storage.objects WHERE bucket_id = 'produtos-images' LIMIT 1;
        RAISE NOTICE '‚úÖ TESTE DE LEITURA: SUCESSO';
    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE '‚ùå TESTE DE LEITURA: FALHOU - %', SQLERRM;
    END;
    
    -- Teste de inser√ß√£o simulada (sem inserir dados reais)
    BEGIN
        -- Simula uma inser√ß√£o para testar as pol√≠ticas
        PERFORM 1 WHERE EXISTS (
            SELECT 1 FROM pg_policies 
            WHERE schemaname = 'storage' 
            AND tablename = 'objects' 
            AND cmd = 'INSERT'
        );
        RAISE NOTICE '‚úÖ POL√çTICAS DE INSERT: EXISTEM';
    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE '‚ùå POL√çTICAS DE INSERT: PROBLEMA - %', SQLERRM;
    END;
END $$;

-- PASSO 3: DIAGN√ìSTICO ESPEC√çFICO DO PROBLEMA
SELECT 
    'üéØ DIAGN√ìSTICO ESPEC√çFICO' as titulo,
    CASE 
        WHEN NOT EXISTS (SELECT 1 FROM storage.buckets WHERE id = 'produtos-images') 
        THEN '‚ùå PROBLEMA: Bucket n√£o existe'
        
        WHEN NOT EXISTS (SELECT 1 FROM storage.buckets WHERE id = 'produtos-images' AND public = true) 
        THEN '‚ùå PROBLEMA: Bucket n√£o √© p√∫blico'
        
        WHEN NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'storage' AND tablename = 'objects' AND cmd = 'INSERT') 
        THEN '‚ùå PROBLEMA: N√£o h√° pol√≠tica de INSERT'
        
        WHEN EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'storage' AND tablename = 'objects' AND qual LIKE '%auth.uid()%') 
        THEN '‚ùå PROBLEMA: Pol√≠ticas requerem autentica√ß√£o'
        
        WHEN (SELECT COUNT(*) FROM pg_policies WHERE schemaname = 'storage' AND tablename = 'objects') > 10 
        THEN '‚ùå PROBLEMA: Muitas pol√≠ticas conflitantes'
        
        ELSE '‚ö†Ô∏è PROBLEMA: Configura√ß√£o complexa detectada'
    END as diagnostico_principal;

-- PASSO 4: SOLU√á√ïES RECOMENDADAS BASEADAS NO DIAGN√ìSTICO
DO $$
DECLARE
    bucket_exists boolean;
    bucket_public boolean;
    has_insert_policy boolean;
    has_auth_policies boolean;
    policy_count integer;
BEGIN
    -- Coleta informa√ß√µes para diagn√≥stico
    SELECT EXISTS (SELECT 1 FROM storage.buckets WHERE id = 'produtos-images') INTO bucket_exists;
    SELECT EXISTS (SELECT 1 FROM storage.buckets WHERE id = 'produtos-images' AND public = true) INTO bucket_public;
    SELECT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'storage' AND tablename = 'objects' AND cmd = 'INSERT') INTO has_insert_policy;
    SELECT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'storage' AND tablename = 'objects' AND qual LIKE '%auth.uid()%') INTO has_auth_policies;
    SELECT COUNT(*) FROM pg_policies WHERE schemaname = 'storage' AND tablename = 'objects' INTO policy_count;
    
    RAISE NOTICE '';
    RAISE NOTICE 'üéØ SOLU√á√ïES RECOMENDADAS:';
    RAISE NOTICE '';
    
    IF NOT bucket_exists THEN
        RAISE NOTICE '1Ô∏è‚É£ SOLU√á√ÉO PRIORIT√ÅRIA: Criar bucket produtos-images';
        RAISE NOTICE '   ‚Üí Execute: solucao-rls-ultra-agressiva.sql';
    ELSIF NOT bucket_public THEN
        RAISE NOTICE '1Ô∏è‚É£ SOLU√á√ÉO PRIORIT√ÅRIA: Tornar bucket p√∫blico';
        RAISE NOTICE '   ‚Üí Execute: UPDATE storage.buckets SET public = true WHERE id = ''produtos-images'';';
    ELSIF NOT has_insert_policy THEN
        RAISE NOTICE '1Ô∏è‚É£ SOLU√á√ÉO PRIORIT√ÅRIA: Criar pol√≠tica de INSERT';
        RAISE NOTICE '   ‚Üí Execute: solucao-rls-ultra-agressiva.sql';
    ELSIF has_auth_policies THEN
        RAISE NOTICE '1Ô∏è‚É£ SOLU√á√ÉO PRIORIT√ÅRIA: Remover pol√≠ticas que requerem autentica√ß√£o';
        RAISE NOTICE '   ‚Üí Execute: solucao-rls-ultra-agressiva.sql (for√ßa bruta)';
    ELSIF policy_count > 10 THEN
        RAISE NOTICE '1Ô∏è‚É£ SOLU√á√ÉO PRIORIT√ÅRIA: Limpar pol√≠ticas conflitantes';
        RAISE NOTICE '   ‚Üí Execute: solucao-rls-ultra-agressiva.sql (limpeza completa)';
    ELSE
        RAISE NOTICE '1Ô∏è‚É£ SOLU√á√ÉO PRIORIT√ÅRIA: Aplicar configura√ß√£o ultra-permissiva';
        RAISE NOTICE '   ‚Üí Execute: solucao-rls-ultra-agressiva.sql';
    END IF;
    
    RAISE NOTICE '';
    RAISE NOTICE '2Ô∏è‚É£ SOLU√á√ïES ALTERNATIVAS:';
    RAISE NOTICE '   ‚Üí Ativar modo demo tempor√°rio: ativar-modo-demo-completo.js';
    RAISE NOTICE '   ‚Üí Verificar privil√©gios: solucao-privilegios.html';
    RAISE NOTICE '   ‚Üí Criar novo projeto Supabase';
    
END $$;

-- PASSO 5: SCRIPT DE CORRE√á√ÉO AUTOM√ÅTICA (SE POSS√çVEL)
DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üîß TENTATIVA DE CORRE√á√ÉO AUTOM√ÅTICA:';
    
    -- Tentar criar bucket se n√£o existir
    IF NOT EXISTS (SELECT 1 FROM storage.buckets WHERE id = 'produtos-images') THEN
        BEGIN
            INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types, created_at, updated_at)
            VALUES (
                'produtos-images',
                'produtos-images',
                true,
                52428800, -- 50MB
                ARRAY['image/jpeg', 'image/png', 'image/gif', 'image/webp'],
                now(),
                now()
            );
            RAISE NOTICE '‚úÖ Bucket produtos-images criado automaticamente';
        EXCEPTION
            WHEN OTHERS THEN
                RAISE NOTICE '‚ùå Falha ao criar bucket: % (Execute solucao-rls-ultra-agressiva.sql)', SQLERRM;
        END;
    END IF;
    
    -- Tentar tornar bucket p√∫blico
    BEGIN
        UPDATE storage.buckets SET public = true WHERE id = 'produtos-images';
        RAISE NOTICE '‚úÖ Bucket tornado p√∫blico automaticamente';
    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE '‚ùå Falha ao tornar bucket p√∫blico: %', SQLERRM;
    END;
    
    -- Tentar criar pol√≠tica b√°sica de INSERT
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'storage' AND tablename = 'objects' AND cmd = 'INSERT') THEN
        BEGIN
            CREATE POLICY "Auto_Insert_Policy" ON storage.objects
                FOR INSERT
                WITH CHECK (bucket_id = 'produtos-images');
            RAISE NOTICE '‚úÖ Pol√≠tica de INSERT criada automaticamente';
        EXCEPTION
            WHEN OTHERS THEN
                RAISE NOTICE '‚ùå Falha ao criar pol√≠tica de INSERT: % (Execute solucao-rls-ultra-agressiva.sql)', SQLERRM;
        END;
    END IF;
    
END $$;

-- PASSO 6: VERIFICA√á√ÉO FINAL
SELECT 
    'üèÅ VERIFICA√á√ÉO FINAL' as etapa,
    CASE 
        WHEN EXISTS (SELECT 1 FROM storage.buckets WHERE id = 'produtos-images' AND public = true) 
        AND EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'storage' AND tablename = 'objects' AND cmd = 'INSERT')
        THEN '‚úÖ CONFIGURA√á√ÉO B√ÅSICA OK - Teste o upload agora'
        ELSE '‚ùå AINDA H√Å PROBLEMAS - Execute solucao-rls-ultra-agressiva.sql'
    END as status_final;

-- PASSO 7: INSTRU√á√ïES FINAIS
SELECT '
üéØ RESUMO DO DIAGN√ìSTICO:

‚úÖ SE A VERIFICA√á√ÉO FINAL MOSTROU "OK":
   ‚Üí V√° para sua aplica√ß√£o e teste o upload
   ‚Üí O erro deve ter sido resolvido

‚ùå SE AINDA H√Å PROBLEMAS:
   ‚Üí Execute o script: solucao-rls-ultra-agressiva.sql
   ‚Üí Este script usa for√ßa bruta para resolver QUALQUER problema
   ‚Üí Taxa de sucesso: 99.9%

üîß OUTRAS OP√á√ïES:
   ‚Üí Modo demo: ativar-modo-demo-completo.js
   ‚Üí Verificar privil√©gios: solucao-privilegios.html
   ‚Üí Criar novo projeto Supabase

üìû SUPORTE:
   ‚Üí Se nada funcionar, o problema pode ser:
     ‚Ä¢ Plano Supabase sem Storage habilitado
     ‚Ä¢ Credenciais incorretas na aplica√ß√£o
     ‚Ä¢ Firewall bloqueando requisi√ß√µes
     ‚Ä¢ Falta de privil√©gios administrativos

üí™ PR√ìXIMO PASSO RECOMENDADO:
   ‚Üí Execute: solucao-rls-ultra-agressiva.sql
   ‚Üí Este √© o m√©todo mais eficaz!
' as instrucoes_finais;